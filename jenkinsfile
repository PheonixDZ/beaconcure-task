pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        skipDefaultCheckout(true)
        timestamps()
    }

    environment {
        AWS_REGION = 'region'
        ECR_REPO_NAME = 'image-app-prod'
        AWS_ACCOUNT_ID = '123456789012'
        PATH = "/usr/local/bin:$PATH"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Get Git SHA') {
            steps {
                script {
                    def shortSha = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    env.IMAGE_TAG = shortSha
                    env.ECR_REPO = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.ECR_REPO_NAME}"
                    env.DOCKER_IMAGE = "${env.ECR_REPO}:${env.IMAGE_TAG}"
                }
            }
        }

        stage('Init Credentials') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "aws",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                        env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
                        env.AWS_DEFAULT_REGION = "${env.AWS_REGION}"
                    }
                    sh 'echo "‚úÖ AWS credentials initialized."'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t ${DOCKER_IMAGE} .
                    docker tag ${DOCKER_IMAGE} ${ECR_REPO}:latest
                '''
            }
        }

        stage('Login & Push to AWS ECR') {
            steps {
                sh '''
                    set +x
                    echo "üîê Logging in to AWS ECR..."
                    aws ecr get-login-password --region $AWS_REGION | \
                    docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                    set -x

                    echo "üì¶ Pushing Docker images..."
                    docker push ${DOCKER_IMAGE}
                    docker push ${ECR_REPO}:latest
                '''
            }
        }

        stage('Update values.yaml') {
            steps {
                sh '''
                    echo "üìù Updating Helm values.yaml..."
                    sed -i 's|tag:.*|tag: '"${IMAGE_TAG}"'|' helm/image-processing/values.yaml
                    sed -i 's|repository:.*|repository: '"${ECR_REPO}"'|' helm/image-processing/values.yaml

                    echo "‚úÖ Updated values.yaml:"
                    grep "tag:" helm/image-processing/values.yaml
                    grep "repository:" helm/image-processing/values.yaml
                '''
            }
        }

        stage('Helm Deploy') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-prod', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                        set -e
                        export KUBECONFIG=$KUBECONFIG_FILE

                        echo "üöÄ Deploying using Helm..."
                        helm upgrade --install image-processing-app ./helm/image-processing --values helm/image-processing/values.yaml --namespace image-processing-app --create-namespace

                        echo "üîç Checking Helm release status..."
                        STATUS=$(helm status image-processing-app --namespace image-processing-app -o json | jq -r '.info.status')

                        if [ "$STATUS" != "deployed" ]; then
                            echo "‚ö†Ô∏è Deployment failed or not in deployed state (status: $STATUS). Rolling back..."
                            CURRENT_REVISION=$(helm history image-processing-app --namespace image-processing-app -o json | jq -r '.[-1].revision')
                            PREVIOUS_REVISION=$((CURRENT_REVISION - 1))
                            helm rollback image-processing-app $PREVIOUS_REVISION --namespace image-processing-app
                            echo "üîÅ Rolled back to revision $PREVIOUS_REVISION"
                        else
                            echo "‚úÖ Deployment succeeded. Release status: $STATUS"
                        fi
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Docker image pushed and Helm release deployed with tag: ${env.IMAGE_TAG}"
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs above.'
        }
        always {
            script {
                echo "üßπ Cleaning up sensitive env vars..."
                env.AWS_ACCESS_KEY_ID = ''
                env.AWS_SECRET_ACCESS_KEY = ''
                env.AWS_DEFAULT_REGION = ''
                env.KUBECONFIG = ''
            }
            echo "üì¶ Post-cleanup complete."
        }
    }
}
